name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: "Check if BlazingMQ can build, and pass unit and integration tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qy build-essential \
            gdb \
            curl \
            python3.10 \
            python3-pip \
            cmake \
            ninja-build \
            pkg-config \
            bison \
            libfl-dev \
            libbenchmark-dev \
            libz-dev
          pip install -r ${{ github.workspace }}/src/python/requirements.txt
      - name: Create dependency fetcher working directory
        run: mkdir -p deps
      - name: Fetch & Build non packaged dependencies
        working-directory: deps
        run: ../docker/build_deps.sh
      - name: Build BlazingMQ
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/opt/bb/lib64/pkgconfig
        run: |
          cmake -S . -B build/blazingmq -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/deps/srcs/bde-tools/BdeBuildSystem/toolchains/linux/gcc-default.cmake \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBDE_BUILD_TARGET_SAFE=ON \
            -DBDE_BUILD_TARGET_64=ON \
            -DBDE_BUILD_TARGET_CPP17=ON \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/deps/srcs/bde-tools/BdeBuildSystem \
            -DCMAKE_INSTALL_LIBDIR=lib64
          cmake --build build/blazingmq --parallel 8 --target all all.t
      - name: Run C++ Unit Tests
        run: |
          cd build/blazingmq
          ctest -E mwcsys_executil.t --output-on-failure
      - name: Run Python Unit Tests
        env:
          PYTHONPATH: src/python
        run: |
          src/python/bin/schemagen
          src/python/bin/tweakgen
          pytest src/python
      - name: Run Integration Tests
        run: |
          ${{ github.workspace }}/src/integration-tests/run-tests \
            --log-level ERROR                   \
            --log-file-level=info               \
            --bmq-tolerate-dirty-shutdown       \
            --bmq-log-dir=failure-logs          \
            --bmq-log-level=INFO                \
            --junitxml=integration-tests.xml    \
            --tb line                           \
            --reruns=3                          \
            -n 4 -v
      - uses: actions/cache@v3
        with:
          path: |
            build/blazingmq
            deps
            /opt/bb/include
          key: cache-${{ github.sha }}

  build_and_test_bmqprometheus_plugin:
    name: "Check if BMQPrometheus plugin can build and pass tests"
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache/@v3
        with:
          path: |
            build/blazingmq
            deps
            /opt/bb/include
          key: cache-${{ github.sha }}
      - name: Set up plugins dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qy build-essential \
            gdb \
            curl \
            python3.10 \
            cmake \
            ninja-build \
            pkg-config \
            bison \
            libfl-dev \
            libbenchmark-dev \
            libz-dev \
            autoconf \
            libtool
      - name: Create dependency fetcher working directory
        run: mkdir -p deps
      - name: Fetch & Build non packaged plugins dependencies
        working-directory: deps
        run:  ${{ github.workspace }}/src/plugins/bmqprometheus/build_prometheus_deps.sh
      - name: Build plugins
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/opt/bb/lib64/pkgconfig
        run: |
          cmake -S . -B build/blazingmq -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/deps/srcs/bde-tools/BdeBuildSystem/toolchains/linux/gcc-default.cmake \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBDE_BUILD_TARGET_SAFE=ON \
            -DBDE_BUILD_TARGET_64=ON \
            -DBDE_BUILD_TARGET_CPP17=ON \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/deps/srcs/bde-tools/BdeBuildSystem \
            -DCMAKE_INSTALL_LIBDIR=lib64 \
            -DINSTALL_TARGETS=prometheus
          cmake --build build/blazingmq --parallel 8 --target all
      - name: Create prometheus dir
        run:  mkdir -p prometheus_dir
      - name: Download Prometheus
        run:  curl -SL "https://github.com/prometheus/prometheus/releases/download/v2.45.1/prometheus-2.45.1.linux-amd64.tar.gz" | tar -xzC prometheus_dir/
      - name: Run Prometheus
        run:  ./prometheus_dir/prometheus-2.45.1.linux-amd64/prometheus --config.file=${{ github.workspace }}/src/plugins/bmqprometheus/tests/prometheus_localhost.yaml --web.enable-lifecycle --storage.tsdb.path=${{ github.workspace }}/prometheus_dir/data &
      - name: Run Pushgateway
        run: |
          docker pull prom/pushgateway
          docker run -d -p 9091:9091 prom/pushgateway
      - name: Run BMQPrometheus plugin integration test in "pull" mode
        run: ${{ github.workspace }}/src/plugins/bmqprometheus/tests/bmqprometheus_prometheusstatconsumer_test.py -p ${{ github.workspace }}/build/blazingmq -m pull --no-docker
      - name: Clear Prometheus database and restart
        run: |
          curl -X POST "http://localhost:9090/-/quit"
          rm -rf prometheus_dir/data
          ./prometheus_dir/prometheus-2.45.1.linux-amd64/prometheus --config.file=${{ github.workspace }}/src/plugins/bmqprometheus/tests/prometheus_localhost.yaml --web.enable-lifecycle --storage.tsdb.path=${{ github.workspace }}/prometheus_dir/data &
      - name: Run Prometheus plugin integration test in "push" mode
        run: ${{ github.workspace }}/src/plugins/bmqprometheus/tests/bmqprometheus_prometheusstatconsumer_test.py -p ${{ github.workspace }}/build/blazingmq -m push --no-docker

  Documentation:
    name: "Documentation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qy doxygen
      - name: Build docs
        run: |
          doxygen Doxyfile

  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - 'src'
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: '14'
          check-path: ${{ matrix.path }}

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

  docker-build-check:
    name: "Check whether docker single-node and cluster workflows build correctly."
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker Single-Node Workflow
        run: docker compose -f docker/single-node/docker-compose.yaml up --build -d
      - name: Docker Cluster Workflow
        run: docker compose -f docker/cluster/docker-compose.yaml up --build -d
