// Copyright 2022-2023 Bloomberg Finance L.P.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// mwcu_noop_cpp03.h                                                  -*-C++-*-

// Automatically generated file.  **DO NOT EDIT**

#ifndef INCLUDED_MWCU_NOOP_CPP03
#define INCLUDED_MWCU_NOOP_CPP03

//@PURPOSE: Provide C++03 implementation for mwcu_noop.h
//
//@CLASSES: See mwcu_noop.h for list of classes
//
//@SEE_ALSO: mwcu_noop
//
//@DESCRIPTION:  This component is the C++03 translation of a C++11 component,
// generated by the 'sim_cpp11_features.pl' program.  If the original header
// contains any specially delimited regions of C++11 code, then this generated
// file contains the C++03 equivalent, i.e., with variadic templates expanded
// and rvalue-references replaced by 'bslmf::MovableRef' objects.  The header
// code in this file is designed to be '#include'd into the original header
// when compiling with a C++03 compiler.  If there are no specially delimited
// regions of C++11 code, then this header contains no code and is not
// '#include'd in the original header.
//
// Generated on Mon Jan 22 16:58:55 2024
// Command line: sim_cpp11_features.pl mwcu_noop.h

#ifdef COMPILING_MWCU_NOOP_H

// clang-format on

namespace BloombergLP {
namespace mwcu {

// ==========
// class NoOp
// ==========

/// A no-op functor.
class NoOp {
  public:
    // TYPES

    /// Defines the result type of the call operator.
    typedef void ResultType;

  public:
    // ACCESSORS
    // clang-format off
#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl mwcu_noop.h
#ifndef MWCU_NOOP_VARIADIC_LIMIT
#define MWCU_NOOP_VARIADIC_LIMIT 9
#endif
#ifndef MWCU_NOOP_VARIADIC_LIMIT_A
#define MWCU_NOOP_VARIADIC_LIMIT_A MWCU_NOOP_VARIADIC_LIMIT
#endif

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 0
    void operator()() const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 0

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 1
    template <class ARGS_1>
    void operator()(const ARGS_1&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 1

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 2
    template <class ARGS_1,
              class ARGS_2>
    void operator()(const ARGS_1&,
                    const ARGS_2&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 2

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 3
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 3

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 4
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3,
              class ARGS_4>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&,
                    const ARGS_4&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 4

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 5
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3,
              class ARGS_4,
              class ARGS_5>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&,
                    const ARGS_4&,
                    const ARGS_5&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 5

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 6
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3,
              class ARGS_4,
              class ARGS_5,
              class ARGS_6>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&,
                    const ARGS_4&,
                    const ARGS_5&,
                    const ARGS_6&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 6

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 7
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3,
              class ARGS_4,
              class ARGS_5,
              class ARGS_6,
              class ARGS_7>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&,
                    const ARGS_4&,
                    const ARGS_5&,
                    const ARGS_6&,
                    const ARGS_7&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 7

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 8
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3,
              class ARGS_4,
              class ARGS_5,
              class ARGS_6,
              class ARGS_7,
              class ARGS_8>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&,
                    const ARGS_4&,
                    const ARGS_5&,
                    const ARGS_6&,
                    const ARGS_7&,
                    const ARGS_8&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 8

#if MWCU_NOOP_VARIADIC_LIMIT_A >= 9
    template <class ARGS_1,
              class ARGS_2,
              class ARGS_3,
              class ARGS_4,
              class ARGS_5,
              class ARGS_6,
              class ARGS_7,
              class ARGS_8,
              class ARGS_9>
    void operator()(const ARGS_1&,
                    const ARGS_2&,
                    const ARGS_3&,
                    const ARGS_4&,
                    const ARGS_5&,
                    const ARGS_6&,
                    const ARGS_7&,
                    const ARGS_8&,
                    const ARGS_9&) const BSLS_KEYWORD_NOEXCEPT;
#endif  // MWCU_NOOP_VARIADIC_LIMIT_A >= 9

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.

    template <class... ARGS>
    void operator()(const ARGS&...) const BSLS_KEYWORD_NOEXCEPT;

// }}} END GENERATED CODE
#endif

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(NoOp, bsl::is_trivially_copyable)
};

// ============================================================================
//                            INLINE DEFINITIONS
// ============================================================================

// ----------
// class NoOp
// ----------

// ACCESSORS
// clang-format off
#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl mwcu_noop.h
#ifndef MWCU_NOOP_VARIADIC_LIMIT
#define MWCU_NOOP_VARIADIC_LIMIT 9
#endif
#ifndef MWCU_NOOP_VARIADIC_LIMIT_B
#define MWCU_NOOP_VARIADIC_LIMIT_B MWCU_NOOP_VARIADIC_LIMIT
#endif
#if MWCU_NOOP_VARIADIC_LIMIT_B >= 0
inline void NoOp::operator()() const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 0

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 1
template <class ARGS_1>
inline void NoOp::operator()(const ARGS_1&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 1

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 2
template <class ARGS_1,
          class ARGS_2>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 2

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 3
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 3

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 4
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3,
          class ARGS_4>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&,
                             const ARGS_4&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 4

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 5
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3,
          class ARGS_4,
          class ARGS_5>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&,
                             const ARGS_4&,
                             const ARGS_5&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 5

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 6
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3,
          class ARGS_4,
          class ARGS_5,
          class ARGS_6>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&,
                             const ARGS_4&,
                             const ARGS_5&,
                             const ARGS_6&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 6

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 7
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3,
          class ARGS_4,
          class ARGS_5,
          class ARGS_6,
          class ARGS_7>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&,
                             const ARGS_4&,
                             const ARGS_5&,
                             const ARGS_6&,
                             const ARGS_7&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 7

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 8
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3,
          class ARGS_4,
          class ARGS_5,
          class ARGS_6,
          class ARGS_7,
          class ARGS_8>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&,
                             const ARGS_4&,
                             const ARGS_5&,
                             const ARGS_6&,
                             const ARGS_7&,
                             const ARGS_8&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 8

#if MWCU_NOOP_VARIADIC_LIMIT_B >= 9
template <class ARGS_1,
          class ARGS_2,
          class ARGS_3,
          class ARGS_4,
          class ARGS_5,
          class ARGS_6,
          class ARGS_7,
          class ARGS_8,
          class ARGS_9>
inline void NoOp::operator()(const ARGS_1&,
                             const ARGS_2&,
                             const ARGS_3&,
                             const ARGS_4&,
                             const ARGS_5&,
                             const ARGS_6&,
                             const ARGS_7&,
                             const ARGS_8&,
                             const ARGS_9&) const BSLS_KEYWORD_NOEXCEPT
{
}
#endif  // MWCU_NOOP_VARIADIC_LIMIT_B >= 9

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class... ARGS>
inline void NoOp::operator()(const ARGS&...) const BSLS_KEYWORD_NOEXCEPT
{
}
// }}} END GENERATED CODE
#endif

}  // close package namespace
}  // close enterprise namespace

// clang-format off

#else // if ! defined(DEFINED_MWCU_NOOP_H)
# error Not valid except when included from mwcu_noop.h
#endif // ! defined(COMPILING_MWCU_NOOP_H)

#endif // ! defined(INCLUDED_MWCU_NOOP_CPP03)

// SCRIPT-SHA: 60926cad35f1091c31a7d8cc9d33acc38edd25e4891f3e1d41fe7c40fd6e02f5
// SOURCE-SHA: 4648afff07d071044bfde573ba13195b1f68ddb124d77bad9ab5c9dc587c626e

