# ThreadSanitizer suppressions file for BlazingMQ.

# There's a lengthy comment in ObjectPool::getObject that explains why this
# isn't a race.  I'm not smart enough to figure out if it's right, but I'll
# assume it's right
race:BloombergLP::bdlcc::ObjectPool<*>::getObject
race:BloombergLP::bdlcc::ObjectPool<*>::releaseObject

# Issue 176120121 is created for tracking.
race:BloombergLP::bdlma::ConcurrentPool::deallocate
race:BloombergLP::bdlma::ConcurrentPool::allocate
race:BloombergLP::bdlma::ConcurrentPool::deleteObject

# Don't warn about using cout from multiple threads
race:std::basic_ostream<char, *>& bsl::operator<< <*>(std::basic_ostream<*>&, bsl::basic_string<*> const&)

# Looks like ball::LoggerManager uses a plain ptr to store its singleton, and
# it makes tsan warn in some cases
race:BloombergLP::ball::LoggerManager::isInitialized()

# Suppress sporadically appearing data race in bmqimp::BrokerSession test driver.
# In TestSession::arriveAtStepWithCfgs() there is a call of queue->setOptions() method,
# at nearly same time in other thread bmqimp::BrokerSession::onConfigureQueueResponse() calls
# queue->options().suspendsOnBadHostHealth() method which is detected as data race.
# bmqt::QueueOptions and bmqimp::Queue classes are not thread safe by design,
# and bmqimp::BrokerSession::onConfigureQueueResponse() callback access them in
# not thread-safe manner, probably also by design, assuming that it will be called again
# if something is changed. Further investigation is required, suppress it for now.
race:BloombergLP::bmqt::QueueOptions::suspendsOnBadHostHealth

# Since we use mqbmock::Dispatcher in unit tests, this method does not get
# enqueued correctly back to cluster-dispatcher thread, causing potential
# data race.
race:BloombergLP::mqbc::ClusterStateManager::onWatchDogDispatched()
